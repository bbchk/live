diff --git a/back/src/controllers/product/get.product_controller.js.js b/back/src/controllers/product/get.product_controller.js.js
index 907cae4..738eb28 100644
--- a/back/src/controllers/product/get.product_controller.js.js
+++ b/back/src/controllers/product/get.product_controller.js.js
@@ -1,5 +1,4 @@
 import * as productService from "#src/services/product/get.product_service.js";
-import * as categoryAndFiltersProductService from "#src/services/product/get_by_category&filters.product_service/get_by_category&filters.product_service.js";
 
 export const getProductById = async (req, res) => {
   const { id } = req.params;
@@ -32,26 +31,3 @@ export const getProducts = async (req, res) => {
 
   res.status(200).json(result.products);
 };
-
-export const getProductsByCategoryAndFilters = async (req, res) => {
-  let { slugCategoryPath, filtersStr } = req.params;
-
-  try {
-    //todo slugCategoryPath, filtersStr validation
-    //todo add page filter to filtersStr if it is not present
-  } catch (e) {
-    return res.status(400).json({ error: e.message });
-  }
-
-  try {
-    const result =
-      await categoryAndFiltersProductService.getProductsByCategoryAndFilters(
-        slugCategoryPath,
-        filtersStr
-      );
-
-    return res.status(200).json(result);
-  } catch (err) {
-    return res.status(500).json({ error: err.message });
-  }
-};
diff --git a/back/src/controllers/product/get_by_category&filters.product_controller.js b/back/src/controllers/product/get_by_category&filters.product_controller.js
new file mode 100644
index 0000000..ced674d
--- /dev/null
+++ b/back/src/controllers/product/get_by_category&filters.product_controller.js
@@ -0,0 +1,23 @@
+import * as productService from "#src/services/product/get_by_category&filters.product_service/get_by_category&filters.product_service.js";
+
+export const getProductsByCategoryAndFilters = async (req, res) => {
+  let { slugCategoryPath, filtersStr } = req.params;
+
+  try {
+    //todo slugCategoryPath, filtersStr validation
+  } catch (e) {
+    return res.status(400).json({ error: e.message });
+  }
+
+  //   try {
+  const result = await productService.getProductsByCategoryAndFilters(
+    slugCategoryPath,
+    filtersStr
+  );
+  console.log(result);
+
+  return res.status(200).json(result);
+  //   } catch (err) {
+  //     return res.status(500).json({ error: err.message });
+  //   }
+};
diff --git a/back/src/middleware/auth.js b/back/src/middleware/auth.js
index 480ba34..57890fa 100644
--- a/back/src/middleware/auth.js
+++ b/back/src/middleware/auth.js
@@ -2,7 +2,9 @@ import jwt from "jsonwebtoken";
 import User from "../models/user.model.js";
 
 export const requireAuth = async (req, res, next) => {
+  console.log(req.headers);
   const { authorization } = req.headers;
+  console.log("ðŸš€ ~ authorization:", authorization);
 
   if (!authorization) {
     return res
@@ -11,11 +13,12 @@ export const requireAuth = async (req, res, next) => {
   }
 
   const token = authorization.split(" ")[1];
+  console.log("ðŸš€ ~ token:", token);
 
   try {
     const secretKey = process.env.JWT_SECRET;
     const { _id } = jwt.verify(token, secretKey);
-
+    console.log("ðŸš€ ~ _id:", _id);
     req.user = await User.findOne({ _id }).select("_id");
     next();
   } catch (error) {
diff --git a/back/src/routes/product.routes.js b/back/src/routes/product.routes.js
index c294ffa..1450c3d 100644
--- a/back/src/routes/product.routes.js
+++ b/back/src/routes/product.routes.js
@@ -5,9 +5,10 @@ import {
   getProducts,
   getProductById,
   getProductsByIds,
-  getProductsByCategoryAndFilters,
 } from "#src/controllers/product/get.product_controller.js.js";
 
+import { getProductsByCategoryAndFilters } from "#src/controllers/product/get_by_category&filters.product_controller.js";
+
 import {
   createProduct,
   createProducts,
diff --git a/back/src/services/product/get_by_category&filters.product_service/get_by_category&filters.product_service.js b/back/src/services/product/get_by_category&filters.product_service/get_by_category&filters.product_service.js
index d75f3de..c571236 100644
--- a/back/src/services/product/get_by_category&filters.product_service/get_by_category&filters.product_service.js
+++ b/back/src/services/product/get_by_category&filters.product_service/get_by_category&filters.product_service.js
@@ -1,4 +1,6 @@
 import Product from "#src/models/product.model.js";
+import { unslugify } from "@bbuukk/slugtrans/slugify";
+import { untransliterate } from "@bbuukk/slugtrans/transliterate";
 
 import { getFilterMapFromStr, getFiltersMap } from "./utils/getFilters.js";
 import { getOriginalFilterNameAndValues } from "./utils/getOrinialFilter.js";
@@ -7,7 +9,6 @@ import {
   getSubcategories,
   getCategoryBySlugPath,
 } from "#src/services/category/get.category_service.js";
-import { getAllFilterMaps } from "./utils/getAllFilterMaps.js";
 
 //? if categoryPath is not changed from previous time, we can just use
 //? product that we already have and filter them
@@ -22,16 +23,72 @@ export async function getProductsByCategoryAndFilters(
 
   const activeCategory = await getCategoryBySlugPath(slugCategoryPath);
   const subcategories = await getSubcategories(activeCategory);
+
+  // result.activeCategory = activeCategory;
+  // result.subcategories = subcategories.filter(
+  //   (category) =>
+  //     category.name !== activeCategory.name &&
+  //     isOneLevelDeeper(category, activeCategory)
+  // );
+
   const activeCategoriesIds = subcategories.map((c) => c._id);
 
+  const allFilterMaps = [];
+
+  /*Creating filters based on filters that applied user */
   let filters = getFilterMapFromStr(filtersStr);
+  for (let [filterName, filterValues] of filters) {
+    if (filterName === "page") {
+      continue;
+    }
+
+    const { originalFilterName, originalFilterValues } =
+      getOriginalFilterNameAndValues(filterName, filterValues);
+
+    let characteristicsQuery = Product.find({
+      category: { $in: activeCategoriesIds },
+    }).select("characteristics");
+
+    let filteredCharacterstics = [];
+    if (filterName === "tsina") {
+      filteredCharacterstics = await characteristicsQuery
+        .where("price")
+        .gte(filterValues[0])
+        .lte(filterValues[1])
+        .exec();
+    } else {
+      filteredCharacterstics = await characteristicsQuery
+        .where(`characteristics.${originalFilterName}`, {
+          $in: originalFilterValues.map(
+            (value) => new RegExp(`^${value}$`, "i")
+          ),
+        })
+        .exec();
+    }
+
+    /*
+        FilterMap parsed from characteristics of products that are filtered by current filter item
+        */
+    const filterMap = getFiltersMap(filteredCharacterstics, activeCategory);
+
+    if (filterName != "tsina") {
+      let allFilterValues = await Product.distinct(
+        `characteristics.${originalFilterName}`,
+        {
+          category: { $in: activeCategoriesIds },
+        }
+      );
+
+      filterMap.set(originalFilterName, allFilterValues);
+    }
+
+    allFilterMaps.push(filterMap);
+  }
+
+  let intersectedFilterMap = intersectMaps(...allFilterMaps);
 
-  let filtersMap = [];
-  const ONLY_PAGE_FILTER = 1;
-  if (filters.size > ONLY_PAGE_FILTER) {
-    let allFilterMaps = await getAllFilterMaps(filters);
-    filtersMap = intersectMaps(...allFilterMaps);
-  } else {
+  /*Getting default category filters if product were not filtered by user*/
+  if (intersectedFilterMap.size == 0) {
     let allCategoryProducts = await Product.find({
       category: { $in: activeCategoriesIds },
     })
@@ -39,9 +96,9 @@ export async function getProductsByCategoryAndFilters(
       .sort({ createdAt: -1 })
       .exec();
 
-    filtersMap = getFiltersMap(allCategoryProducts, activeCategory);
+    intersectedFilterMap = getFiltersMap(allCategoryProducts, activeCategory);
   }
-  result.filtersMap = Array.from(filtersMap.entries());
+  result.filtersMap = Array.from(intersectedFilterMap.entries());
 
   /*Creating query for resulted products*/
   let query = Product.find({
diff --git a/back/src/services/product/get_by_category&filters.product_service/utils/getAllFilterMaps.js b/back/src/services/product/get_by_category&filters.product_service/utils/getAllFilterMaps.js
deleted file mode 100644
index df3bbc0..0000000
--- a/back/src/services/product/get_by_category&filters.product_service/utils/getAllFilterMaps.js
+++ /dev/null
@@ -1,57 +0,0 @@
-import Product from "#src/models/product.model.js";
-
-import { getFilterMapFromStr, getFiltersMap } from "./getFilters.js";
-import { getOriginalFilterNameAndValues } from "./getOrinialFilter.js";
-
-export async function getAllFilterMaps(filters) {
-  const allFilterMaps = [];
-
-  for (let [filterName, filterValues] of filters) {
-    if (filterName === "page") {
-      continue;
-    }
-
-    const { originalFilterName, originalFilterValues } =
-      getOriginalFilterNameAndValues(filterName, filterValues);
-
-    let characteristicsQuery = Product.find({
-      category: { $in: activeCategoriesIds },
-    }).select("characteristics");
-
-    let filteredCharacteristics = [];
-
-    if (filterName === "tsina") {
-      filteredCharacteristics = await characteristicsQuery
-        .where("price")
-        .gte(filterValues[0])
-        .lte(filterValues[1])
-        .exec();
-    } else {
-      const regexFilterValues = originalFilterValues.map(
-        (value) => new RegExp(`^${value}$`, "i")
-      );
-
-      filteredCharacteristics = await characteristicsQuery
-        .where(`characteristics.${originalFilterName}`, {
-          $in: regexFilterValues,
-        })
-        .exec();
-    }
-
-    const filterMap = getFiltersMap(filteredCharacteristics, activeCategory);
-
-    if (filterName !== "tsina") {
-      const allFilterValues = await Product.distinct(
-        `characteristics.${originalFilterName}`,
-        {
-          category: { $in: activeCategoriesIds },
-        }
-      );
-
-      filterMap.set(originalFilterName, allFilterValues);
-    }
-
-    allFilterMaps.push(filterMap);
-  }
-  return allFilterMaps;
-}
diff --git a/back/src/services/product/get_by_category&filters.product_service/utils/getFilters.js b/back/src/services/product/get_by_category&filters.product_service/utils/getFilters.js
index 0761b87..87bde66 100644
--- a/back/src/services/product/get_by_category&filters.product_service/utils/getFilters.js
+++ b/back/src/services/product/get_by_category&filters.product_service/utils/getFilters.js
@@ -21,7 +21,6 @@ export function getFiltersMap(products, activeCategory) {
 
 export function getFilterMapFromStr(filtersStr) {
   let filters = null;
-
   if (filtersStr) {
     filters = new Map();
     filtersStr.split(";").forEach((fs) => {
diff --git a/front/pages/products/[categoryPath]/[filtersStr]/index.js b/front/pages/products/[categoryPath]/[filtersStr]/index.js
index 74bec62..21f6bc2 100644
--- a/front/pages/products/[categoryPath]/[filtersStr]/index.js
+++ b/front/pages/products/[categoryPath]/[filtersStr]/index.js
@@ -126,10 +126,9 @@ export async function getServerSideProps(context) {
   const { categoryPath, filtersStr } = context.params;
 
   try {
-    const productsRes = await axios.get(
-      `/products/${categoryPath}/${filtersStr}`
-    );
-    const products = productsRes.data;
+    //todo filterStr validation
+    const res = await axios.get(`/products/${categoryPath}/${filtersStr}`);
+    const data = res.data;
 
     let page = 1;
     const match = filtersStr.match(/page=(\d+)/);
@@ -137,20 +136,20 @@ export async function getServerSideProps(context) {
       page = filtersStr.match(/page=(\d+)/)[1];
     }
 
-    const activeCategoryRes = await axios.get(`/categories/${categoryPath}`);
-    const activeCategory = activeCategoryRes.data;
+    const resActiveCategory = await axios.get(`/categories/${categoryPath}`);
+    const activeCategory = resActiveCategory.data;
 
-    const directSubcategoriesRes = await axios.get(
+    const resDirectSubcategories = await axios.get(
       `/categories/subcategories/${categoryPath}`
     );
-    const directSubcategories = directSubcategoriesRes.data;
+    const directSubcategories = resDirectSubcategories.data;
 
     //todo make it a minutes for production
-    const HALF_AN_HOUR = 1800;
+    const HALF_AN_HOUR_IN_SECONDS = 1800;
     return {
       props: {
-        data: { activeCategory, directSubcategories, ...products, page },
-        revalidate: HALF_AN_HOUR,
+        data: { activeCategory, directSubcategories, ...data, page },
+        revalidate: HALF_AN_HOUR_IN_SECONDS,
       },
     };
   } catch (e) {
